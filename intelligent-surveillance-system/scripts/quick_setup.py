#!/usr/bin/env python3
"""
Script de configuration rapide pour le syst√®me de surveillance intelligente.

Ce script automatise:
- Installation des d√©pendances
- T√©l√©chargement des mod√®les pr√©-entra√Æn√©s
- Configuration des r√©pertoires
- Tests d'int√©grit√© du syst√®me
- G√©n√©ration des fichiers de configuration
"""

import os
import sys
import subprocess
import json
import yaml
import argparse
import requests
import tarfile
import zipfile
from pathlib import Path
from typing import Dict, List, Optional
import logging
from datetime import datetime
import platform
import shutil

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SurveillanceSystemSetup:
    """Configurateur automatique du syst√®me de surveillance."""
    
    def __init__(self, base_path: str = "."):
        self.base_path = Path(base_path).resolve()
        self.system_info = self._get_system_info()
        self.setup_config = self._load_setup_config()
        
    def _get_system_info(self) -> Dict:
        """D√©tecte les informations syst√®me."""
        
        info = {
            'platform': platform.system(),
            'architecture': platform.architecture()[0],
            'python_version': platform.python_version(),
            'cpu_count': os.cpu_count(),
            'memory_gb': 0,
            'gpu_available': False,
            'gpu_memory_gb': 0,
            'docker_available': False,
            'git_available': False
        }
        
        # D√©tection GPU
        try:
            import torch
            info['gpu_available'] = torch.cuda.is_available()
            if info['gpu_available']:
                info['gpu_memory_gb'] = torch.cuda.get_device_properties(0).total_memory / 1e9
                info['gpu_name'] = torch.cuda.get_device_name(0)
        except ImportError:
            pass
        
        # D√©tection m√©moire syst√®me
        try:
            import psutil
            info['memory_gb'] = psutil.virtual_memory().total / 1e9
        except ImportError:
            pass
        
        # D√©tection Docker
        try:
            subprocess.run(['docker', '--version'], 
                         capture_output=True, check=True)
            info['docker_available'] = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            pass
        
        # D√©tection Git
        try:
            subprocess.run(['git', '--version'], 
                         capture_output=True, check=True)
            info['git_available'] = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            pass
        
        return info
    
    def _load_setup_config(self) -> Dict:
        """Charge la configuration de setup."""
        
        return {
            'dependencies': {
                'core': [
                    'torch>=2.0.0',
                    'torchvision>=0.15.0',
                    'ultralytics>=8.0.0',
                    'transformers>=4.30.0',
                    'accelerate>=0.20.0',
                    'peft>=0.4.0',
                    'datasets>=2.12.0'
                ],
                'vision': [
                    'opencv-python>=4.8.0',
                    'pillow>=9.5.0',
                    'albumentations>=1.3.0',
                    'scikit-image>=0.20.0'
                ],
                'ml': [
                    'scikit-learn>=1.3.0',
                    'scipy>=1.10.0',
                    'numpy>=1.24.0',
                    'pandas>=2.0.0'
                ],
                'monitoring': [
                    'psutil>=5.9.0',
                    'tqdm>=4.65.0',
                    'matplotlib>=3.7.0',
                    'seaborn>=0.12.0'
                ],
                'optional': [
                    'wandb>=0.15.0',
                    'tensorboard>=2.13.0',
                    'jupyter>=1.0.0',
                    'onnxruntime-gpu>=1.15.0',
                    'pynvml>=11.5.0'
                ]
            },
            'models': {
                'yolo': {
                    'yolov8n.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt',
                    'yolov8s.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8s.pt'
                },
                'vlm': {
                    'model_name': 'llava-hf/llava-v1.6-mistral-7b-hf',
                    'cache_dir': './models/vlm_cache'
                }
            },
            'directories': [
                'data/datasets/surveillance_detection/images/train',
                'data/datasets/surveillance_detection/images/val',
                'data/datasets/surveillance_detection/images/test',
                'data/datasets/surveillance_detection/labels/train',
                'data/datasets/surveillance_detection/labels/val',
                'data/datasets/surveillance_detection/labels/test',
                'data/datasets/vlm_surveillance/images',
                'data/datasets/behavior_analysis/sequences',
                'data/datasets/synthetic/generated_scenes',
                'models/yolo',
                'models/vlm',
                'models/validation',
                'logs',
                'outputs/training',
                'outputs/inference',
                'outputs/evaluation'
            ]
        }
    
    def run_complete_setup(self, install_optional: bool = False, 
                          skip_models: bool = False) -> bool:
        """Ex√©cute la configuration compl√®te."""
        
        logger.info("üöÄ D√©marrage de la configuration compl√®te du syst√®me de surveillance")
        logger.info(f"üìã Syst√®me d√©tect√©: {self.system_info}")
        
        setup_steps = [
            ('create_directories', 'Cr√©ation des r√©pertoires'),
            ('install_dependencies', 'Installation des d√©pendances', install_optional),
            ('download_models', 'T√©l√©chargement des mod√®les', skip_models),
            ('generate_configs', 'G√©n√©ration des configurations'),
            ('run_system_tests', 'Tests d\'int√©grit√© syst√®me'),
            ('create_scripts', 'Cr√©ation des scripts utilitaires'),
            ('finalize_setup', 'Finalisation de la configuration')
        ]
        
        for i, step_info in enumerate(setup_steps, 1):
            step_name = step_info[0]
            step_desc = step_info[1]
            
            logger.info(f"[{i}/{len(setup_steps)}] {step_desc}...")
            
            try:
                if len(step_info) > 2:
                    # √âtape avec param√®tre
                    result = getattr(self, step_name)(step_info[2])
                else:
                    result = getattr(self, step_name)()
                
                if not result:
                    logger.error(f"‚ùå √âchec de l'√©tape: {step_desc}")
                    return False
                
                logger.info(f"‚úÖ {step_desc} termin√©")
                
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de {step_desc}: {e}")
                return False
        
        logger.info("üéâ Configuration compl√®te termin√©e avec succ√®s!")
        self._print_setup_summary()
        
        return True
    
    def create_directories(self) -> bool:
        """Cr√©e la structure de r√©pertoires."""
        
        try:
            for directory in self.setup_config['directories']:
                dir_path = self.base_path / directory
                dir_path.mkdir(parents=True, exist_ok=True)
                logger.debug(f"R√©pertoire cr√©√©: {dir_path}")
            
            return True
            
        except Exception as e:
            logger.error(f"Erreur cr√©ation r√©pertoires: {e}")
            return False
    
    def install_dependencies(self, install_optional: bool = False) -> bool:
        """Installe les d√©pendances Python."""
        
        try:
            # Installation des d√©pendances core
            for category in ['core', 'vision', 'ml', 'monitoring']:
                packages = self.setup_config['dependencies'][category]
                logger.info(f"Installation des packages {category}: {packages}")
                
                cmd = [sys.executable, '-m', 'pip', 'install'] + packages
                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if result.returncode != 0:
                    logger.warning(f"Erreur installation {category}: {result.stderr}")
                    # Continue quand m√™me, certains packages peuvent √™tre optionnels
            
            # Installation des d√©pendances optionnelles
            if install_optional:
                optional_packages = self.setup_config['dependencies']['optional']
                logger.info(f"Installation des packages optionnels: {optional_packages}")
                
                for package in optional_packages:
                    try:
                        cmd = [sys.executable, '-m', 'pip', 'install', package]
                        subprocess.run(cmd, check=True, capture_output=True)
                        logger.debug(f"Package optionnel install√©: {package}")
                    except subprocess.CalledProcessError as e:
                        logger.warning(f"Package optionnel non install√©: {package}")
            
            return True
            
        except Exception as e:
            logger.error(f"Erreur installation d√©pendances: {e}")
            return False
    
    def download_models(self, skip_download: bool = False) -> bool:
        """T√©l√©charge les mod√®les pr√©-entra√Æn√©s."""
        
        if skip_download:
            logger.info("‚è≠Ô∏è T√©l√©chargement des mod√®les ignor√©")
            return True
        
        try:
            models_config = self.setup_config['models']
            
            # T√©l√©chargement des mod√®les YOLO
            yolo_dir = self.base_path / 'models' / 'yolo'
            yolo_dir.mkdir(parents=True, exist_ok=True)
            
            for model_name, model_url in models_config['yolo'].items():
                model_path = yolo_dir / model_name
                
                if model_path.exists():
                    logger.info(f"Mod√®le d√©j√† pr√©sent: {model_name}")
                    continue
                
                logger.info(f"T√©l√©chargement de {model_name}...")
                response = requests.get(model_url, stream=True)
                response.raise_for_status()
                
                with open(model_path, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)
                
                logger.info(f"‚úÖ {model_name} t√©l√©charg√©")
            
            # Pr√©paration du cache VLM
            vlm_config = models_config['vlm']
            vlm_cache_dir = self.base_path / vlm_config['cache_dir']
            vlm_cache_dir.mkdir(parents=True, exist_ok=True)
            
            # Le mod√®le VLM sera t√©l√©charg√© automatiquement lors du premier usage
            logger.info(f"Cache VLM pr√©par√©: {vlm_cache_dir}")
            
            return True
            
        except Exception as e:
            logger.error(f"Erreur t√©l√©chargement mod√®les: {e}")
            return False
    
    def generate_configs(self) -> bool:
        """G√©n√®re les fichiers de configuration."""
        
        try:
            # Configuration principale du syst√®me
            system_config = {
                'system': {
                    'base_path': str(self.base_path),
                    'data_path': str(self.base_path / 'data'),
                    'models_path': str(self.base_path / 'models'),
                    'logs_path': str(self.base_path / 'logs'),
                    'outputs_path': str(self.base_path / 'outputs')
                },
                'hardware': {
                    'gpu_available': self.system_info['gpu_available'],
                    'gpu_memory_gb': self.system_info.get('gpu_memory_gb', 0),
                    'cpu_count': self.system_info['cpu_count'],
                    'memory_gb': self.system_info.get('memory_gb', 8)
                },
                'models': {
                    'yolo': {
                        'model_path': 'models/yolo/yolov8n.pt',
                        'device': 'cuda' if self.system_info['gpu_available'] else 'cpu',
                        'confidence_threshold': 0.25,
                        'iou_threshold': 0.45
                    },
                    'vlm': {
                        'model_name': 'llava-hf/llava-v1.6-mistral-7b-hf',
                        'cache_dir': 'models/vlm_cache',
                        'load_in_4bit': True,
                        'max_new_tokens': 256
                    }
                },
                'pipeline': {
                    'max_concurrent_streams': min(4, self.system_info['cpu_count']),
                    'frame_buffer_size': 100,
                    'detection_threshold': 0.25,
                    'validation_threshold': 0.7
                }
            }
            
            config_path = self.base_path / 'config' / 'system_config.yaml'
            config_path.parent.mkdir(exist_ok=True)
            
            with open(config_path, 'w') as f:
                yaml.dump(system_config, f, default_flow_style=False, indent=2)
            
            logger.info(f"Configuration syst√®me g√©n√©r√©e: {config_path}")
            
            # Configuration dataset YOLO
            dataset_config = {
                'path': str(self.base_path / 'data' / 'datasets' / 'surveillance_detection'),
                'train': 'images/train',
                'val': 'images/val',
                'test': 'images/test',
                'names': {
                    0: 'person', 1: 'handbag', 2: 'backpack', 3: 'suitcase',
                    4: 'bottle', 5: 'cup', 6: 'cell_phone', 7: 'book',
                    8: 'shopping_cart', 9: 'suspicious_object'
                }
            }
            
            dataset_path = self.base_path / 'data' / 'datasets' / 'surveillance_detection' / 'dataset.yaml'
            dataset_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(dataset_path, 'w') as f:
                yaml.dump(dataset_config, f, default_flow_style=False, indent=2)
            
            logger.info(f"Configuration dataset g√©n√©r√©e: {dataset_path}")
            
            return True
            
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration configurations: {e}")
            return False
    
    def run_system_tests(self) -> bool:
        """Ex√©cute les tests d'int√©grit√© syst√®me."""
        
        try:
            test_results = {
                'python_imports': self._test_python_imports(),
                'model_loading': self._test_model_loading(),
                'gpu_functionality': self._test_gpu_functionality(),
                'file_structure': self._test_file_structure()
            }
            
            all_passed = all(test_results.values())
            
            logger.info("üìä R√©sultats des tests:")
            for test_name, passed in test_results.items():
                status = "‚úÖ PASS" if passed else "‚ùå FAIL"
                logger.info(f"  {test_name}: {status}")
            
            if not all_passed:
                logger.warning("‚ö†Ô∏è Certains tests ont √©chou√©, v√©rifiez la configuration")
            
            return all_passed
            
        except Exception as e:
            logger.error(f"Erreur tests syst√®me: {e}")
            return False
    
    def _test_python_imports(self) -> bool:
        """Test des imports Python critiques."""
        
        critical_modules = [
            'torch', 'torchvision', 'ultralytics', 
            'transformers', 'cv2', 'PIL', 'numpy'
        ]
        
        for module in critical_modules:
            try:
                __import__(module)
            except ImportError as e:
                logger.error(f"Import √©chou√©: {module} - {e}")
                return False
        
        return True
    
    def _test_model_loading(self) -> bool:
        """Test de chargement des mod√®les."""
        
        try:
            # Test YOLO
            yolo_path = self.base_path / 'models' / 'yolo' / 'yolov8n.pt'
            if yolo_path.exists():
                from ultralytics import YOLO
                model = YOLO(str(yolo_path))
                logger.debug("Mod√®le YOLO charg√© avec succ√®s")
            else:
                logger.warning("Mod√®le YOLO non trouv√©")
            
            # Test des imports VLM (sans charger le mod√®le complet)
            from transformers import AutoTokenizer, AutoModelForCausalLM
            logger.debug("Modules VLM import√©s avec succ√®s")
            
            return True
            
        except Exception as e:
            logger.error(f"Test mod√®les √©chou√©: {e}")
            return False
    
    def _test_gpu_functionality(self) -> bool:
        """Test de fonctionnalit√© GPU."""
        
        if not self.system_info['gpu_available']:
            logger.info("GPU non disponible, test ignor√©")
            return True
        
        try:
            import torch
            
            # Test basique GPU
            device = torch.device('cuda')
            x = torch.randn(10, 10, device=device)
            y = torch.randn(10, 10, device=device)
            z = x @ y
            
            logger.debug("Test GPU basique r√©ussi")
            return True
            
        except Exception as e:
            logger.error(f"Test GPU √©chou√©: {e}")
            return False
    
    def _test_file_structure(self) -> bool:
        """Test de la structure de fichiers."""
        
        critical_dirs = [
            'data/datasets',
            'models',
            'logs',
            'config'
        ]
        
        for dir_name in critical_dirs:
            dir_path = self.base_path / dir_name
            if not dir_path.exists():
                logger.error(f"R√©pertoire critique manquant: {dir_path}")
                return False
        
        return True
    
    def create_scripts(self) -> bool:
        """Cr√©e les scripts utilitaires."""
        
        try:
            scripts_dir = self.base_path / 'scripts'
            scripts_dir.mkdir(exist_ok=True)
            
            # Script de d√©marrage rapide
            quick_start_script = '''#!/usr/bin/env python3
"""Script de d√©marrage rapide du syst√®me de surveillance."""

import sys
import os
from pathlib import Path

# Ajout du chemin du projet
project_path = Path(__file__).parent.parent
sys.path.append(str(project_path / "src"))

def main():
    print("üöÄ D√©marrage du syst√®me de surveillance intelligente...")
    
    try:
        # Import des modules principaux
        from detection.yolo.detector import YOLODetector
        from core.vlm.model import VisionLanguageModel
        
        print("‚úÖ Modules import√©s avec succ√®s")
        
        # Initialisation basique
        detector = YOLODetector()
        print("‚úÖ D√©tecteur YOLO initialis√©")
        
        print("üéâ Syst√®me pr√™t √† fonctionner!")
        print("üìö Consultez les notebooks dans le dossier 'notebooks' pour commencer")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
'''
            
            quick_start_path = scripts_dir / 'quick_start.py'
            with open(quick_start_path, 'w') as f:
                f.write(quick_start_script)
            
            # Rendre ex√©cutable
            quick_start_path.chmod(0o755)
            
            # Script de g√©n√©ration de donn√©es synth√©tiques
            synthetic_script = f'''#!/usr/bin/env python3
"""Script de g√©n√©ration rapide de donn√©es synth√©tiques."""

import sys
from pathlib import Path

project_path = Path(__file__).parent.parent
sys.path.append(str(project_path))

from scripts.synthetic_data_generator import SyntheticDatasetGenerator, SyntheticConfig

def main():
    print("üé≠ G√©n√©ration de donn√©es synth√©tiques...")
    
    config = SyntheticConfig(
        output_dir="{self.base_path}/data/synthetic",
        num_scenes=1000,
        image_size=(640, 640)
    )
    
    generator = SyntheticDatasetGenerator(config)
    stats = generator.generate_dataset()
    
    print(f"‚úÖ G√©n√©r√©: {{stats['generated_scenes']}} sc√®nes")
    print(f"üìä Annotations: {{stats['total_annotations']}}")
    
if __name__ == "__main__":
    main()
'''
            
            synthetic_path = scripts_dir / 'generate_synthetic_data.py'
            with open(synthetic_path, 'w') as f:
                f.write(synthetic_script)
            
            synthetic_path.chmod(0o755)
            
            logger.info(f"Scripts utilitaires cr√©√©s dans {scripts_dir}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur cr√©ation scripts: {e}")
            return False
    
    def finalize_setup(self) -> bool:
        """Finalise la configuration."""
        
        try:
            # Cr√©ation du fichier de version
            version_info = {
                'version': '1.0.0',
                'setup_date': datetime.now().isoformat(),
                'system_info': self.system_info,
                'components': [
                    'YOLO Detection',
                    'VLM Analysis', 
                    'Cross Validation',
                    'Performance Monitoring'
                ]
            }
            
            version_path = self.base_path / '.system_info.json'
            with open(version_path, 'w') as f:
                json.dump(version_info, f, indent=2)
            
            # Cr√©ation du README de d√©marrage
            readme_content = f"""# Syst√®me de Surveillance Intelligente

## ‚úÖ Configuration Termin√©e

Ce syst√®me a √©t√© configur√© automatiquement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}.

## üöÄ D√©marrage Rapide

1. **Test du syst√®me:**
   ```bash
   python scripts/quick_start.py
   ```

2. **G√©n√©ration de donn√©es d'entra√Ænement:**
   ```bash
   python scripts/generate_synthetic_data.py
   ```

3. **Notebooks d'entra√Ænement:**
   - `notebooks/1_fine_tuning_vlm.ipynb` - Fine-tuning du mod√®le VLM
   - `notebooks/2_transfer_learning_yolo.ipynb` - Transfer learning YOLO
   - `notebooks/3_end_to_end_training.ipynb` - Entra√Ænement complet

## üìÅ Structure du Projet

```
{self.base_path.name}/
‚îú‚îÄ‚îÄ src/                    # Code source principal
‚îú‚îÄ‚îÄ data/                   # Donn√©es et datasets  
‚îú‚îÄ‚îÄ models/                 # Mod√®les entra√Æn√©s
‚îú‚îÄ‚îÄ notebooks/              # Notebooks Jupyter
‚îú‚îÄ‚îÄ scripts/                # Scripts utilitaires
‚îú‚îÄ‚îÄ config/                 # Fichiers de configuration
‚îî‚îÄ‚îÄ docs/                   # Documentation

```

## ‚öôÔ∏è Configuration Syst√®me

- **GPU**: {'Disponible' if self.system_info['gpu_available'] else 'Non disponible'}
- **M√©moire**: {self.system_info.get('memory_gb', 0):.1f} GB
- **CPUs**: {self.system_info['cpu_count']}

## üìö Documentation

Consultez `docs/training_methodologies.md` pour la documentation compl√®te des m√©thodologies d'entra√Ænement.

## üîß Support

En cas de probl√®me, v√©rifiez:
1. Les logs dans `logs/`
2. La configuration dans `config/`
3. Les tests avec `python scripts/quick_start.py`
"""
            
            readme_path = self.base_path / 'QUICK_START.md'
            with open(readme_path, 'w', encoding='utf-8') as f:
                f.write(readme_content)
            
            return True
            
        except Exception as e:
            logger.error(f"Erreur finalisation: {e}")
            return False
    
    def _print_setup_summary(self):
        """Affiche le r√©sum√© de la configuration."""
        
        print("\n" + "="*60)
        print("üéâ CONFIGURATION SYST√àME TERMIN√âE")
        print("="*60)
        
        print(f"üìÅ R√©pertoire: {self.base_path}")
        print(f"üñ•Ô∏è  Syst√®me: {self.system_info['platform']} {self.system_info['architecture']}")
        print(f"üêç Python: {self.system_info['python_version']}")
        print(f"üíæ M√©moire: {self.system_info.get('memory_gb', 0):.1f} GB")
        print(f"‚ö° CPUs: {self.system_info['cpu_count']}")
        
        if self.system_info['gpu_available']:
            print(f"üéÆ GPU: {self.system_info.get('gpu_name', 'Disponible')}")
            print(f"üíæ M√©moire GPU: {self.system_info.get('gpu_memory_gb', 0):.1f} GB")
        else:
            print("üéÆ GPU: Non disponible")
        
        print("\nüìö PROCHAINES √âTAPES:")
        print("1. Testez le syst√®me: python scripts/quick_start.py")
        print("2. G√©n√©rez des donn√©es: python scripts/generate_synthetic_data.py") 
        print("3. Consultez les notebooks dans notebooks/")
        print("4. Lisez la documentation dans docs/")
        
        print("\nüîó FICHIERS IMPORTANTS:")
        print("- config/system_config.yaml - Configuration principale")
        print("- QUICK_START.md - Guide de d√©marrage")
        print("- .system_info.json - Informations syst√®me")
        
        print("\n" + "="*60)


def main():
    """Fonction principale avec interface en ligne de commande."""
    
    parser = argparse.ArgumentParser(
        description='Configuration automatique du syst√®me de surveillance intelligente'
    )
    
    parser.add_argument('--path', '-p', default='.',
                       help='R√©pertoire de base du projet')
    parser.add_argument('--install-optional', action='store_true',
                       help='Installer les d√©pendances optionnelles')
    parser.add_argument('--skip-models', action='store_true',
                       help='Ignorer le t√©l√©chargement des mod√®les')
    parser.add_argument('--test-only', action='store_true',
                       help='Ex√©cuter uniquement les tests syst√®me')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Mode verbose')
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # Initialisation du configurateur
    setup = SurveillanceSystemSetup(args.path)
    
    if args.test_only:
        # Tests uniquement
        logger.info("üß™ Ex√©cution des tests syst√®me uniquement")
        success = setup.run_system_tests()
        return 0 if success else 1
    
    # Configuration compl√®te
    success = setup.run_complete_setup(
        install_optional=args.install_optional,
        skip_models=args.skip_models
    )
    
    return 0 if success else 1


if __name__ == '__main__':
    sys.exit(main())