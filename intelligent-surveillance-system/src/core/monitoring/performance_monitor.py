"""
Moniteur de performance centralis√© pour le syst√®me de surveillance.
"""

import time
import logging
import asyncio
from typing import Dict, List, Any, Optional, Callable
from dataclasses import dataclass, field
from collections import defaultdict, deque
import threading
from abc import ABC, abstractmethod

logger = logging.getLogger(__name__)


@dataclass
class PerformanceMetric:
    """M√©trique de performance individuelle."""
    name: str
    value: float
    timestamp: float
    unit: str = ""
    category: str = "general"
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass 
class PerformanceSnapshot:
    """Instantan√© des performances √† un moment donn√©."""
    timestamp: float
    metrics: Dict[str, PerformanceMetric]
    system_info: Dict[str, Any] = field(default_factory=dict)
    
    def get_metric(self, name: str) -> Optional[PerformanceMetric]:
        """R√©cup√®re une m√©trique par nom."""
        return self.metrics.get(name)
    
    def get_metrics_by_category(self, category: str) -> Dict[str, PerformanceMetric]:
        """R√©cup√®re toutes les m√©triques d'une cat√©gorie."""
        return {
            name: metric for name, metric in self.metrics.items()
            if metric.category == category
        }


class MetricsCollector(ABC):
    """Interface pour les collecteurs de m√©triques."""
    
    @abstractmethod
    async def collect_metrics(self) -> Dict[str, PerformanceMetric]:
        """Collecte les m√©triques et retourne un dictionnaire."""
        pass
    
    @abstractmethod
    def get_collector_name(self) -> str:
        """Retourne le nom du collecteur."""
        pass


class PerformanceMonitor:
    """
    Moniteur de performance centralis√© pour le syst√®me de surveillance.
    
    Ce moniteur collecte, agr√®ge et analyse les m√©triques de performance
    de tous les composants du syst√®me en temps r√©el.
    
    Features:
    - Collection automatique de m√©triques multi-sources
    - Historique des performances avec fen√™tres glissantes
    - D√©tection d'anomalies et alertes
    - Export de m√©triques pour monitoring externe
    - Threading pour collection non-bloquante
    
    Example:
        >>> monitor = PerformanceMonitor(interval=10.0)
        >>> monitor.add_collector(VLMMetricsCollector())
        >>> monitor.start()
        >>> # ... syst√®me en fonctionnement ...
        >>> snapshot = monitor.get_current_snapshot()
        >>> monitor.stop()
    """
    
    def __init__(
        self,
        collection_interval: float = 5.0,
        history_size: int = 1000,
        enable_alerts: bool = True
    ):
        """
        Initialise le moniteur de performance.
        
        Args:
            collection_interval: Intervalle de collection en secondes
            history_size: Taille de l'historique √† conserver
            enable_alerts: Active les alertes de performance
        """
        self.collection_interval = collection_interval
        self.history_size = history_size
        self.enable_alerts = enable_alerts
        
        # Collecteurs de m√©triques
        self.collectors: List[MetricsCollector] = []
        
        # Historique des performances
        self.metrics_history: deque = deque(maxlen=history_size)
        self.current_snapshot: Optional[PerformanceSnapshot] = None
        
        # Statistiques agr√©g√©es
        self.aggregated_stats: Dict[str, Dict[str, float]] = defaultdict(lambda: defaultdict(float))
        
        # Contr√¥le du threading
        self._running = False
        self._collection_thread: Optional[threading.Thread] = None
        self._lock = threading.RLock()
        
        # Callbacks pour alertes
        self.alert_callbacks: List[Callable[[str, Dict[str, Any]], None]] = []
        
        # Seuils d'alerte par d√©faut
        self.alert_thresholds = {
            "cpu_usage": {"warning": 80.0, "critical": 95.0},
            "memory_usage": {"warning": 80.0, "critical": 95.0},
            "gpu_memory_usage": {"warning": 85.0, "critical": 98.0},
            "processing_time": {"warning": 2.0, "critical": 5.0},
            "frame_drop_rate": {"warning": 10.0, "critical": 25.0}
        }
        
        logger.info(f"‚úÖ Moniteur de performance initialis√© (intervalle: {collection_interval}s)")
    
    def add_collector(self, collector: MetricsCollector) -> None:
        """
        Ajoute un collecteur de m√©triques.
        
        Args:
            collector: Instance de collecteur de m√©triques
        """
        with self._lock:
            self.collectors.append(collector)
            logger.info(f"üìä Collecteur ajout√©: {collector.get_collector_name()}")
    
    def remove_collector(self, collector_name: str) -> bool:
        """
        Supprime un collecteur par nom.
        
        Args:
            collector_name: Nom du collecteur √† supprimer
            
        Returns:
            True si le collecteur a √©t√© trouv√© et supprim√©
        """
        with self._lock:
            for i, collector in enumerate(self.collectors):
                if collector.get_collector_name() == collector_name:
                    del self.collectors[i]
                    logger.info(f"üóëÔ∏è Collecteur supprim√©: {collector_name}")
                    return True
            return False
    
    def start(self) -> None:
        """D√©marre la collection de m√©triques en arri√®re-plan."""
        if self._running:
            logger.warning("‚ö†Ô∏è Moniteur d√©j√† en cours d'ex√©cution")
            return
        
        self._running = True
        self._collection_thread = threading.Thread(
            target=self._collection_loop,
            daemon=True,
            name="PerformanceMonitor"
        )
        self._collection_thread.start()
        
        logger.info("üöÄ Moniteur de performance d√©marr√©")
    
    def stop(self) -> None:
        """Arr√™te la collection de m√©triques."""
        if not self._running:
            return
        
        self._running = False
        if self._collection_thread:
            self._collection_thread.join(timeout=self.collection_interval + 1.0)
        
        logger.info("üõë Moniteur de performance arr√™t√©")
    
    def _collection_loop(self) -> None:
        """Boucle principale de collection de m√©triques."""
        while self._running:
            try:
                # Collection asynchrone des m√©triques
                snapshot = asyncio.run(self._collect_all_metrics())
                
                if snapshot:
                    with self._lock:
                        # Mise √† jour de l'historique
                        self.metrics_history.append(snapshot)
                        self.current_snapshot = snapshot
                        
                        # Mise √† jour des statistiques agr√©g√©es
                        self._update_aggregated_stats(snapshot)
                        
                        # V√©rification des alertes
                        if self.enable_alerts:
                            self._check_alerts(snapshot)
                
                # Attente avant la prochaine collection
                time.sleep(self.collection_interval)
                
            except Exception as e:
                logger.error(f"‚ùå Erreur collection m√©triques: {e}")
                time.sleep(1.0)  # Pause courte avant de r√©essayer
    
    async def _collect_all_metrics(self) -> Optional[PerformanceSnapshot]:
        """Collecte toutes les m√©triques de tous les collecteurs."""
        timestamp = time.time()
        all_metrics = {}
        
        # Collection depuis tous les collecteurs
        for collector in self.collectors:
            try:
                metrics = await collector.collect_metrics()
                all_metrics.update(metrics)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur collecteur {collector.get_collector_name()}: {e}")
        
        if not all_metrics:
            return None
        
        return PerformanceSnapshot(
            timestamp=timestamp,
            metrics=all_metrics,
            system_info=self._get_system_info()
        )
    
    def _get_system_info(self) -> Dict[str, Any]:
        """R√©cup√®re les informations syst√®me de base."""
        return {
            "timestamp": time.time(),
            "active_collectors": len(self.collectors),
            "history_size": len(self.metrics_history)
        }
    
    def _update_aggregated_stats(self, snapshot: PerformanceSnapshot) -> None:
        """Met √† jour les statistiques agr√©g√©es."""
        for name, metric in snapshot.metrics.items():
            stats = self.aggregated_stats[name]
            
            # Mise √† jour des statistiques
            stats["count"] += 1
            stats["sum"] += metric.value
            stats["average"] = stats["sum"] / stats["count"]
            
            # Min/Max
            if "min" not in stats or metric.value < stats["min"]:
                stats["min"] = metric.value
            if "max" not in stats or metric.value > stats["max"]:
                stats["max"] = metric.value
            
            # Derni√®re valeur
            stats["last"] = metric.value
            stats["last_timestamp"] = metric.timestamp
    
    def _check_alerts(self, snapshot: PerformanceSnapshot) -> None:
        """V√©rifie les seuils d'alerte pour les m√©triques."""
        for name, metric in snapshot.metrics.items():
            if name in self.alert_thresholds:
                thresholds = self.alert_thresholds[name]
                
                alert_level = None
                if metric.value >= thresholds.get("critical", float('inf')):
                    alert_level = "critical"
                elif metric.value >= thresholds.get("warning", float('inf')):
                    alert_level = "warning"
                
                if alert_level:
                    alert_data = {
                        "metric": name,
                        "value": metric.value,
                        "threshold": thresholds[alert_level],
                        "level": alert_level,
                        "timestamp": metric.timestamp,
                        "unit": metric.unit
                    }
                    
                    self._trigger_alert(alert_level, alert_data)
    
    def _trigger_alert(self, level: str, alert_data: Dict[str, Any]) -> None:
        """D√©clenche une alerte."""
        message = (
            f"üö® Alerte {level.upper()}: "
            f"{alert_data['metric']} = {alert_data['value']}{alert_data['unit']} "
            f"(seuil: {alert_data['threshold']})"
        )
        
        logger.warning(message)
        
        # Appel des callbacks d'alerte
        for callback in self.alert_callbacks:
            try:
                callback(level, alert_data)
            except Exception as e:
                logger.error(f"‚ùå Erreur callback alerte: {e}")
    
    def get_current_snapshot(self) -> Optional[PerformanceSnapshot]:
        """Retourne l'instantan√© de performances le plus r√©cent."""
        with self._lock:
            return self.current_snapshot
    
    def get_metrics_history(self, limit: Optional[int] = None) -> List[PerformanceSnapshot]:
        """
        Retourne l'historique des m√©triques.
        
        Args:
            limit: Nombre maximum d'entr√©es √† retourner
            
        Returns:
            Liste des instantan√©s de performance
        """
        with self._lock:
            history = list(self.metrics_history)
            if limit:
                return history[-limit:]
            return history
    
    def get_aggregated_stats(self) -> Dict[str, Dict[str, float]]:
        """Retourne les statistiques agr√©g√©es."""
        with self._lock:
            return dict(self.aggregated_stats)
    
    def get_metric_trend(
        self, 
        metric_name: str, 
        duration: float = 300.0
    ) -> List[float]:
        """
        Retourne la tendance d'une m√©trique sur une dur√©e donn√©e.
        
        Args:
            metric_name: Nom de la m√©trique
            duration: Dur√©e en secondes
            
        Returns:
            Liste des valeurs de la m√©trique
        """
        with self._lock:
            cutoff_time = time.time() - duration
            values = []
            
            for snapshot in reversed(self.metrics_history):
                if snapshot.timestamp < cutoff_time:
                    break
                
                metric = snapshot.get_metric(metric_name)
                if metric:
                    values.insert(0, metric.value)
            
            return values
    
    def add_alert_callback(self, callback: Callable[[str, Dict[str, Any]], None]) -> None:
        """Ajoute un callback pour les alertes."""
        self.alert_callbacks.append(callback)
    
    def set_alert_threshold(
        self, 
        metric_name: str, 
        warning: Optional[float] = None,
        critical: Optional[float] = None
    ) -> None:
        """
        Configure les seuils d'alerte pour une m√©trique.
        
        Args:
            metric_name: Nom de la m√©trique
            warning: Seuil d'avertissement
            critical: Seuil critique
        """
        if metric_name not in self.alert_thresholds:
            self.alert_thresholds[metric_name] = {}
        
        if warning is not None:
            self.alert_thresholds[metric_name]["warning"] = warning
        if critical is not None:
            self.alert_thresholds[metric_name]["critical"] = critical
        
        logger.info(f"üìê Seuils configur√©s pour {metric_name}: {self.alert_thresholds[metric_name]}")
    
    def export_metrics(
        self, 
        format: str = "json", 
        duration: Optional[float] = None
    ) -> Dict[str, Any]:
        """
        Exporte les m√©triques dans un format sp√©cifique.
        
        Args:
            format: Format d'export ('json', 'prometheus')
            duration: Dur√©e √† exporter (None = tout l'historique)
            
        Returns:
            Donn√©es export√©es dans le format demand√©
        """
        with self._lock:
            if duration:
                cutoff_time = time.time() - duration
                snapshots = [
                    s for s in self.metrics_history 
                    if s.timestamp >= cutoff_time
                ]
            else:
                snapshots = list(self.metrics_history)
            
            if format == "json":
                return {
                    "snapshots": [
                        {
                            "timestamp": s.timestamp,
                            "metrics": {
                                name: {
                                    "value": m.value,
                                    "unit": m.unit,
                                    "category": m.category
                                }
                                for name, m in s.metrics.items()
                            }
                        }
                        for s in snapshots
                    ],
                    "aggregated_stats": dict(self.aggregated_stats),
                    "collection_info": {
                        "interval": self.collection_interval,
                        "total_snapshots": len(snapshots),
                        "start_time": snapshots[0].timestamp if snapshots else None,
                        "end_time": snapshots[-1].timestamp if snapshots else None
                    }
                }
            
            elif format == "prometheus":
                # Format Prometheus simple
                lines = []
                if snapshots:
                    latest = snapshots[-1]
                    for name, metric in latest.metrics.items():
                        lines.append(f"surveillance_{name} {metric.value}")
                
                return {"prometheus_text": "\n".join(lines)}
            
            else:
                raise ValueError(f"Format d'export non support√©: {format}")
    
    def __enter__(self):
        """Context manager entry."""
        self.start()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit."""
        self.stop()