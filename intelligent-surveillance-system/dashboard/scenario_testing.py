#!/usr/bin/env python3
"""
üéØ Module de Test de Sc√©narios VLM
Module pour tester des sc√©narios qualitatifs concrets et analyser les r√©actions du VLM
"""

import time
import json
from datetime import datetime
from typing import Dict, List, Any
import base64
import cv2
import numpy as np

class VLMScenarioTester:
    """Testeur de sc√©narios concrets pour validation qualitative du VLM."""
    
    def __init__(self):
        self.scenarios = {}
        self.test_results = []
        self.load_predefined_scenarios()
    
    def load_predefined_scenarios(self):
        """Charge les sc√©narios pr√©d√©finis pour tests."""
        
        # SC√âNARIO 1: Faux Positif √† √âviter
        self.scenarios["jogging_morning"] = {
            "id": "faux_positif_jogging",
            "description": "Personne qui fait du jogging le matin",
            "context": {
                "time": "06:30",
                "location": "Zone r√©sidentielle",
                "weather": "Ensoleill√©",
                "day_type": "Jour de semaine"
            },
            "detection_input": {
                "objects": ["person"],
                "confidence": 0.92,
                "movement": "rapid_linear",
                "clothing": "sportswear",
                "behavior": "rhythmic_movement"
            },
            "expected_outcome": {
                "should_alert": False,
                "classification": "Activit√© normale",
                "reasoning": [
                    "Heure matinale appropri√©e pour jogging",
                    "Tenue sportive coh√©rente",
                    "Mouvement rythm√© caract√©ristique du jogging",
                    "Zone r√©sidentielle autorise cette activit√©"
                ]
            }
        }
        
        # SC√âNARIO 2: Vrai Positif √† D√©tecter
        self.scenarios["night_intrusion"] = {
            "id": "vrai_positif_intrusion",
            "description": "Intrusion nocturne dans zone commerciale",
            "context": {
                "time": "02:15",
                "location": "Zone commerciale",
                "weather": "Nuageux",
                "day_type": "Nuit en semaine"
            },
            "detection_input": {
                "objects": ["person", "bag", "tool"],
                "confidence": 0.89,
                "movement": "furtive_slow",
                "clothing": "dark_clothing",
                "behavior": "avoiding_cameras"
            },
            "expected_outcome": {
                "should_alert": True,
                "classification": "Intrusion probable",
                "reasoning": [
                    "Heure inappropri√©e (2h du matin)",
                    "Zone commerciale ferm√©e",
                    "Comportement furtif suspect",
                    "Objets potentiellement d'effraction"
                ]
            }
        }
        
        # SC√âNARIO 3: Cas Ambig√º
        self.scenarios["delivery_evening"] = {
            "id": "cas_ambigu_livraison",
            "description": "Livreur tardif dans zone r√©sidentielle",
            "context": {
                "time": "21:45",
                "location": "Zone r√©sidentielle",
                "weather": "Pluvieux",
                "day_type": "Vendredi soir"
            },
            "detection_input": {
                "objects": ["person", "package", "vehicle"],
                "confidence": 0.87,
                "movement": "purposeful_fast",
                "clothing": "uniform",
                "behavior": "checking_addresses"
            },
            "expected_outcome": {
                "should_alert": "maybe",
                "classification": "Activit√© √† surveiller",
                "reasoning": [
                    "Heure tardive mais pas anormale",
                    "Pr√©sence de colis sugg√®re livraison",
                    "Uniforme coh√©rent avec livreur",
                    "Behavior de v√©rification d'adresse normal"
                ]
            }
        }
    
    def create_test_image(self, scenario_id: str) -> np.ndarray:
        """Cr√©e une image de test simul√©e pour le sc√©nario."""
        scenario = self.scenarios[scenario_id]
        
        # Image de base (640x480)
        if "night" in scenario_id:
            # Image sombre pour sc√©narios nocturnes
            img = np.random.randint(10, 50, (480, 640, 3), dtype=np.uint8)
        else:
            # Image claire pour sc√©narios diurnes
            img = np.random.randint(100, 200, (480, 640, 3), dtype=np.uint8)
        
        # Ajoute des √©l√©ments visuels selon le sc√©nario
        context = scenario["context"]
        detection = scenario["detection_input"]
        
        # Simule une personne (rectangle)
        person_color = (50, 50, 50) if "dark_clothing" in detection["clothing"] else (100, 150, 200)
        cv2.rectangle(img, (200, 150), (350, 400), person_color, -1)
        
        # Ajoute objets selon le sc√©nario
        if "bag" in detection["objects"]:
            cv2.rectangle(img, (320, 280), (380, 320), (80, 80, 80), -1)
        
        if "package" in detection["objects"]:
            cv2.rectangle(img, (180, 350), (220, 380), (139, 69, 19), -1)
        
        # Overlay avec informations de contexte
        cv2.putText(img, f"Heure: {context['time']}", (10, 30), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
        cv2.putText(img, f"Zone: {context['location']}", (10, 60), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
        cv2.putText(img, f"Scenario: {scenario['description']}", (10, 450), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
        
        return img
    
    def simulate_vlm_analysis(self, scenario_id: str, image: np.ndarray) -> Dict[str, Any]:
        """Simule l'analyse VLM pour un sc√©nario donn√©."""
        scenario = self.scenarios[scenario_id]
        
        # Simule le temps de traitement VLM
        time.sleep(0.1)  # Simulation d√©lai r√©aliste
        
        # G√©n√®re la r√©ponse VLM bas√©e sur le sc√©nario
        analysis = {
            "timestamp": datetime.now().isoformat(),
            "scenario_id": scenario_id,
            "confidence": 0.85 + np.random.random() * 0.1,  # 85-95%
            "detected_objects": scenario["detection_input"]["objects"],
            "context_analysis": {
                "time_appropriateness": self._analyze_time_context(scenario),
                "location_appropriateness": self._analyze_location_context(scenario),
                "behavior_assessment": self._analyze_behavior(scenario),
                "threat_level": self._calculate_threat_level(scenario)
            },
            "reasoning_chain": self._generate_reasoning(scenario),
            "final_decision": {
                "should_alert": scenario["expected_outcome"]["should_alert"],
                "classification": scenario["expected_outcome"]["classification"],
                "confidence_level": "high" if scenario["expected_outcome"]["should_alert"] != "maybe" else "medium"
            }
        }
        
        return analysis
    
    def _analyze_time_context(self, scenario: Dict) -> Dict[str, Any]:
        """Analyse le contexte temporel."""
        time_str = scenario["context"]["time"]
        hour = int(time_str.split(":")[0])
        
        if 6 <= hour <= 22:
            return {"appropriate": True, "reason": "Heure diurne normale"}
        elif 22 <= hour <= 24 or 0 <= hour <= 6:
            return {"appropriate": False, "reason": "Heure nocturne suspecte"}
        
    def _analyze_location_context(self, scenario: Dict) -> Dict[str, Any]:
        """Analyse le contexte de localisation."""
        location = scenario["context"]["location"]
        time_str = scenario["context"]["time"]
        hour = int(time_str.split(":")[0])
        
        if "commerciale" in location and (hour < 8 or hour > 20):
            return {"appropriate": False, "reason": "Zone commerciale ferm√©e"}
        elif "r√©sidentielle" in location:
            return {"appropriate": True, "reason": "Zone r√©sidentielle autoris√©e"}
        
        return {"appropriate": True, "reason": "Zone neutre"}
    
    def _analyze_behavior(self, scenario: Dict) -> Dict[str, Any]:
        """Analyse comportementale."""
        behavior = scenario["detection_input"]["behavior"]
        
        behavior_analysis = {
            "rhythmic_movement": {"suspicious": False, "reason": "Mouvement sportif normal"},
            "avoiding_cameras": {"suspicious": True, "reason": "√âvitement cam√©ras suspect"},
            "furtive_slow": {"suspicious": True, "reason": "Mouvement furtif anormal"},
            "checking_addresses": {"suspicious": False, "reason": "V√©rification adresses normale"}
        }
        
        return behavior_analysis.get(behavior, {"suspicious": False, "reason": "Comportement neutre"})
    
    def _calculate_threat_level(self, scenario: Dict) -> str:
        """Calcule le niveau de menace."""
        factors = [
            self._analyze_time_context(scenario)["appropriate"],
            self._analyze_location_context(scenario)["appropriate"],
            not self._analyze_behavior(scenario)["suspicious"]
        ]
        
        if all(factors):
            return "low"
        elif any(factors):
            return "medium"
        else:
            return "high"
    
    def _generate_reasoning(self, scenario: Dict) -> List[str]:
        """G√©n√®re la cha√Æne de raisonnement VLM."""
        reasoning = []
        
        # Analyse temporelle
        time_analysis = self._analyze_time_context(scenario)
        reasoning.append(f"Analyse temporelle: {time_analysis['reason']}")
        
        # Analyse spatiale
        location_analysis = self._analyze_location_context(scenario)
        reasoning.append(f"Analyse spatiale: {location_analysis['reason']}")
        
        # Analyse comportementale
        behavior_analysis = self._analyze_behavior(scenario)
        reasoning.append(f"Analyse comportementale: {behavior_analysis['reason']}")
        
        # Objets d√©tect√©s
        objects = scenario["detection_input"]["objects"]
        reasoning.append(f"Objets d√©tect√©s: {', '.join(objects)}")
        
        # Conclusion
        expected = scenario["expected_outcome"]
        reasoning.append(f"Conclusion: {expected['classification']}")
        
        return reasoning
    
    def run_scenario_test(self, scenario_id: str) -> Dict[str, Any]:
        """Ex√©cute un test de sc√©nario complet."""
        if scenario_id not in self.scenarios:
            raise ValueError(f"Sc√©nario {scenario_id} non trouv√©")
        
        scenario = self.scenarios[scenario_id]
        
        # G√©n√®re l'image de test
        test_image = self.create_test_image(scenario_id)
        
        # Simule l'analyse VLM
        vlm_result = self.simulate_vlm_analysis(scenario_id, test_image)
        
        # √âvalue le r√©sultat
        evaluation = self._evaluate_result(scenario, vlm_result)
        
        # Compile le r√©sultat final
        test_result = {
            "scenario": scenario,
            "vlm_analysis": vlm_result,
            "evaluation": evaluation,
            "test_timestamp": datetime.now().isoformat()
        }
        
        self.test_results.append(test_result)
        return test_result
    
    def _evaluate_result(self, scenario: Dict, vlm_result: Dict) -> Dict[str, Any]:
        """√âvalue si le r√©sultat VLM correspond aux attentes."""
        expected = scenario["expected_outcome"]
        actual = vlm_result["final_decision"]
        
        # Compare les r√©sultats
        correct_alert = expected["should_alert"] == actual["should_alert"]
        correct_classification = expected["classification"] == actual["classification"]
        
        return {
            "correct_alert_decision": correct_alert,
            "correct_classification": correct_classification,
            "overall_success": correct_alert and correct_classification,
            "expected_vs_actual": {
                "expected": expected,
                "actual": actual
            }
        }
    
    def run_all_scenarios(self) -> Dict[str, Any]:
        """Ex√©cute tous les sc√©narios de test."""
        results = {}
        
        print("üéØ D√âMARRAGE TESTS SC√âNARIOS VLM")
        print("=" * 50)
        
        for scenario_id in self.scenarios.keys():
            print(f"\nüß™ Test du sc√©nario: {scenario_id}")
            
            try:
                result = self.run_scenario_test(scenario_id)
                results[scenario_id] = result
                
                success = result["evaluation"]["overall_success"]
                status = "‚úÖ R√âUSSI" if success else "‚ùå √âCHOU√â"
                print(f"   {status}")
                
                # Affiche le raisonnement VLM
                print("   üìã Raisonnement VLM:")
                for step in result["vlm_analysis"]["reasoning_chain"]:
                    print(f"      ‚Ä¢ {step}")
                
            except Exception as e:
                print(f"   ‚ùå ERREUR: {e}")
                results[scenario_id] = {"error": str(e)}
        
        # Statistiques globales
        successful_tests = sum(1 for r in results.values() 
                             if "evaluation" in r and r["evaluation"]["overall_success"])
        total_tests = len(results)
        
        summary = {
            "total_scenarios": total_tests,
            "successful_scenarios": successful_tests,
            "success_rate": successful_tests / total_tests if total_tests > 0 else 0,
            "detailed_results": results
        }
        
        print(f"\nüìä R√âSULTATS GLOBAUX:")
        print(f"   Tests r√©ussis: {successful_tests}/{total_tests}")
        print(f"   Taux de succ√®s: {summary['success_rate']:.1%}")
        
        return summary
    
    def generate_report(self) -> str:
        """G√©n√®re un rapport d√©taill√© des tests."""
        if not self.test_results:
            return "Aucun test ex√©cut√©"
        
        report = []
        report.append("# üìã RAPPORT DE TESTS SC√âNARIOS VLM")
        report.append("=" * 50)
        report.append(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append(f"Nombre de sc√©narios test√©s: {len(self.test_results)}")
        report.append("")
        
        for i, result in enumerate(self.test_results, 1):
            scenario = result["scenario"]
            vlm_analysis = result["vlm_analysis"]
            evaluation = result["evaluation"]
            
            report.append(f"## Sc√©nario {i}: {scenario['description']}")
            report.append(f"**ID:** {scenario['id']}")
            report.append(f"**Contexte:** {scenario['context']}")
            report.append("")
            
            report.append("### Raisonnement VLM:")
            for step in vlm_analysis["reasoning_chain"]:
                report.append(f"- {step}")
            report.append("")
            
            report.append("### R√©sultat:")
            decision = vlm_analysis["final_decision"]
            report.append(f"- **Alerte:** {'Oui' if decision['should_alert'] else 'Non'}")
            report.append(f"- **Classification:** {decision['classification']}")
            report.append(f"- **Confiance:** {decision['confidence_level']}")
            report.append("")
            
            report.append("### √âvaluation:")
            success = "‚úÖ R√âUSSI" if evaluation["overall_success"] else "‚ùå √âCHOU√â"
            report.append(f"**R√©sultat:** {success}")
            report.append("")
        
        return "\n".join(report)

# Exemple d'utilisation
if __name__ == "__main__":
    tester = VLMScenarioTester()
    
    # Test de tous les sc√©narios
    results = tester.run_all_scenarios()
    
    # G√©n√®re le rapport
    report = tester.generate_report()
    
    # Sauvegarde le rapport
    with open("vlm_scenario_test_report.md", "w", encoding="utf-8") as f:
        f.write(report)
    
    print(f"\nüìÑ Rapport sauvegard√©: vlm_scenario_test_report.md")