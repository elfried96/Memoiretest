name: Build and Deploy Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'

# Permissions pour d√©ployer sur GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# √âviter les d√©ploiements concurrents
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Job de build de la documentation
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # N√©cessaire pour git-revision-date-localized
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev
        
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docs.txt
        
    - name: Configure Git for MkDocs
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
    - name: Build Documentation
      run: |
        mkdocs build --verbose --strict
        
    - name: Upload Documentation Artifacts
      uses: actions/upload-pages-artifact@v2
      with:
        path: './site'

  # Job de d√©ploiement sur GitHub Pages
  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  # Job de v√©rification des liens
  link-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docs.txt
        
    - name: Build Documentation
      run: mkdocs build --verbose
        
    - name: Check Links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/workflows/mlc_config.json'
        folder-path: 'docs'

  # Job de test de qualit√© de la documentation
  doc-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docs.txt
        pip install doc8 textstat
        
    - name: Check Documentation Style
      run: |
        # V√©rification du style des fichiers markdown
        doc8 docs --max-line-length 100 --ignore D001
        
    - name: Analyze Documentation Readability
      run: |
        python -c "
        import textstat
        import os
        
        total_files = 0
        total_score = 0
        
        for root, dirs, files in os.walk('docs'):
            for file in files:
                if file.endswith('.md'):
                    filepath = os.path.join(root, file)
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                        score = textstat.flesch_reading_ease(content)
                        total_score += score
                        total_files += 1
                        print(f'{filepath}: {score:.1f}')
        
        if total_files > 0:
            avg_score = total_score / total_files
            print(f'Score de lisibilit√© moyen: {avg_score:.1f}')
            
            if avg_score < 30:
                print('‚ö†Ô∏è  Documentation difficile √† lire')
            elif avg_score < 50:
                print('üìñ Documentation moyennement lisible')  
            else:
                print('‚úÖ Documentation facilement lisible')
        "

  # Job de g√©n√©ration du sitemap
  sitemap:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Generate Sitemap
      run: |
        cat > sitemap.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
          <url>
            <loc>https://elfried-kinzoun.github.io/intelligent-surveillance-system/</loc>
            <lastmod>$(date -I)</lastmod>
            <changefreq>weekly</changefreq>
            <priority>1.0</priority>
          </url>
          <url>
            <loc>https://elfried-kinzoun.github.io/intelligent-surveillance-system/getting-started/installation/</loc>
            <lastmod>$(date -I)</lastmod>
            <changefreq>monthly</changefreq>
            <priority>0.8</priority>
          </url>
          <url>
            <loc>https://elfried-kinzoun.github.io/intelligent-surveillance-system/getting-started/colab/</loc>
            <lastmod>$(date -I)</lastmod>
            <changefreq>weekly</changefreq>
            <priority>0.9</priority>
          </url>
        </urlset>
        EOF
        
    - name: Upload Sitemap
      # Cette √©tape n√©cessiterait un d√©ploiement suppl√©mentaire du sitemap
      run: echo "Sitemap g√©n√©r√© - √† d√©ployer s√©par√©ment si n√©cessaire"

  # Job de notification
  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notification Success
      if: needs.deploy.result == 'success'
      run: |
        echo "‚úÖ Documentation d√©ploy√©e avec succ√®s!"
        echo "üîó URL: https://elfried-kinzoun.github.io/intelligent-surveillance-system/"
        
    - name: Notification Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå √âchec du d√©ploiement de la documentation"
        exit 1