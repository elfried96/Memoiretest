#!/usr/bin/env python3
"""
üßπ Nettoyage S√©curis√© du Projet
===============================

Version s√©curis√©e qui nettoie seulement les fichiers vraiment inutiles
sans toucher au code source ou aux d√©pendances importantes.
"""

import os
import sys
import shutil
from pathlib import Path
from datetime import datetime

def clean_python_cache():
    """Nettoie les fichiers cache Python."""
    print("üßπ Nettoyage cache Python...")
    
    patterns = [
        "**/__pycache__",
        "**/*.pyc", 
        "**/*.pyo",
        "**/*.pyd"
    ]
    
    removed = 0
    for pattern in patterns:
        for path in Path(".").glob(pattern):
            try:
                if path.is_file():
                    path.unlink()
                    removed += 1
                elif path.is_dir():
                    shutil.rmtree(path)
                    removed += 1
                print(f"   ‚úÖ {path}")
            except Exception as e:
                print(f"   ‚ùå Erreur {path}: {e}")
    
    print(f"‚úÖ Cache Python: {removed} √©l√©ments supprim√©s")

def clean_test_results():
    """Nettoie les anciens r√©sultats de tests."""
    print("\nüßπ Nettoyage r√©sultats tests...")
    
    patterns = [
        "performance_results_*.json",
        "real_metrics_*.json", 
        "evaluation_results_*.json",
        "complete_system_video_tests_*.json",
        "real_vlm_test_results_*.json",
        "cleanup_report.json"
    ]
    
    removed = 0
    for pattern in patterns:
        for path in Path(".").glob(pattern):
            try:
                path.unlink()
                removed += 1
                print(f"   ‚úÖ {path}")
            except Exception as e:
                print(f"   ‚ùå Erreur {path}: {e}")
    
    print(f"‚úÖ R√©sultats tests: {removed} fichiers supprim√©s")

def clean_system_files():
    """Nettoie les fichiers syst√®me."""
    print("\nüßπ Nettoyage fichiers syst√®me...")
    
    patterns = [
        "**/.DS_Store",
        "**/Thumbs.db",
        "**/*.tmp",
        "**/*.temp",
        "**/*.bak",
        "**/*.swp",
        "**/*.swo"
    ]
    
    removed = 0
    for pattern in patterns:
        for path in Path(".").glob(pattern):
            try:
                path.unlink()
                removed += 1
                print(f"   ‚úÖ {path}")
            except Exception as e:
                print(f"   ‚ùå Erreur {path}: {e}")
    
    print(f"‚úÖ Fichiers syst√®me: {removed} fichiers supprim√©s")

def clean_logs():
    """Nettoie les logs."""
    print("\nüßπ Nettoyage logs...")
    
    patterns = [
        "**/*.log",
        "**/logs"
    ]
    
    removed = 0
    for pattern in patterns:
        for path in Path(".").glob(pattern):
            try:
                if path.is_file():
                    path.unlink()
                    removed += 1
                elif path.is_dir():
                    shutil.rmtree(path)
                    removed += 1
                print(f"   ‚úÖ {path}")
            except Exception as e:
                print(f"   ‚ùå Erreur {path}: {e}")
    
    print(f"‚úÖ Logs: {removed} √©l√©ments supprim√©s")

def remove_duplicate_files():
    """Supprime les fichiers dupliqu√©s identifi√©s."""
    print("\nüßπ Suppression fichiers dupliqu√©s/obsol√®tes...")
    
    duplicates = [
        # Tests obsol√®tes
        "collect_real_metrics.py",  # Int√©gr√© dans run_real_vlm_tests.py
        "test_dashboard_gpu.py",    # Fonctionnalit√© dans run_performance_tests.py
        "evaluate_system.py",
        "real_evaluation_guide.py",
        
        # Plans d'√©valuation
        "evaluation_plan_*.json"
    ]
    
    removed = 0
    for duplicate in duplicates:
        for path in Path(".").glob(duplicate):
            try:
                path.unlink()
                removed += 1
                print(f"   ‚úÖ {path} (obsol√®te)")
            except Exception as e:
                print(f"   ‚ùå Erreur {path}: {e}")
    
    print(f"‚úÖ Fichiers dupliqu√©s: {removed} fichiers supprim√©s")

def clean_empty_directories():
    """Supprime les dossiers vides."""
    print("\nüßπ Suppression dossiers vides...")
    
    removed = 0
    # Parcours r√©cursif des dossiers
    for root, dirs, files in os.walk(".", topdown=False):
        for dir_name in dirs:
            dir_path = Path(root) / dir_name
            try:
                # Skip dossiers importants
                if any(important in str(dir_path) for important in ['.venv', '.git', 'node_modules']):
                    continue
                    
                if dir_path.is_dir() and not any(dir_path.iterdir()):
                    dir_path.rmdir()
                    removed += 1
                    print(f"   ‚úÖ {dir_path}/ (vide)")
            except Exception as e:
                pass  # Ignore erreurs dossiers non vides
    
    print(f"‚úÖ Dossiers vides: {removed} dossiers supprim√©s")

def show_project_structure():
    """Affiche la structure projet nettoy√©e."""
    print("\nüìÅ STRUCTURE PROJET APR√àS NETTOYAGE:")
    print("=" * 40)
    
    important_paths = [
        "src/",
        "dashboard/",
        "tests/",
        "README.md",
        "pyproject.toml"
    ]
    
    for path_str in important_paths:
        path = Path(path_str)
        if path.exists():
            if path.is_dir():
                file_count = len(list(path.rglob("*.py")))
                print(f"‚úÖ {path}/ ({file_count} fichiers Python)")
            else:
                print(f"‚úÖ {path}")
        else:
            print(f"‚ö†Ô∏è  {path} (manquant)")

def main():
    """Nettoyage principal s√©curis√©."""
    print("üßπ NETTOYAGE S√âCURIS√â DU PROJET")
    print("=" * 45)
    print("Ce script nettoie seulement les fichiers cache et temporaires")
    print("AUCUN code source ne sera supprim√©")
    print()
    
    # Confirmation (auto en mode non-interactif)
    if len(sys.argv) > 1 and "--auto" in sys.argv:
        print("Mode automatique activ√©")
    else:
        try:
            confirm = input("Continuer le nettoyage ? (oui/non): ").lower()
            if confirm not in ['oui', 'o', 'yes', 'y']:
                print("‚ùå Nettoyage annul√©")
                return
        except EOFError:
            print("Mode automatique (non-interactif)")
            # Continue automatiquement
    
    start_time = datetime.now()
    
    try:
        # Nettoyages s√©curis√©s
        clean_python_cache()
        clean_test_results()
        clean_system_files()
        clean_logs()
        remove_duplicate_files()
        clean_empty_directories()
        
        # Affichage structure finale
        show_project_structure()
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        print(f"\nüéâ NETTOYAGE TERMIN√â!")
        print(f"‚è±Ô∏è  Dur√©e: {duration:.1f}s")
        print(f"üìÅ Projet nettoy√© et optimis√©")
        
        # Recommandations
        print(f"\nüí° RECOMMANDATIONS POST-NETTOYAGE:")
        print(f"1. V√©rifiez que tout fonctionne: python run_performance_tests.py")
        print(f"2. Testez le dashboard: streamlit run dashboard/production_dashboard.py")
        print(f"3. Si probl√®mes, r√©g√©n√©rez le cache: python -m py_compile [fichier.py]")
        
    except Exception as e:
        print(f"\n‚ùå Erreur durant nettoyage: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()