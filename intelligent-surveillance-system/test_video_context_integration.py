#!/usr/bin/env python3
"""
üß™ Test d'int√©gration du contexte vid√©o - V√©rification compl√®te
==============================================================

Script de test pour v√©rifier que l'int√©gration des descriptions vid√©o
fonctionne correctement avec le syst√®me VLM.
"""

import sys
import os
import asyncio
from datetime import datetime
from pathlib import Path

# Ajout du chemin pour les imports
sys.path.append(str(Path(__file__).parent / "dashboard"))
sys.path.append(str(Path(__file__).parent / "src"))

# Test des imports
print("üîç Test des imports...")
try:
    from dashboard.video_context_integration import (
        VideoContextMetadata,
        VideoContextPromptBuilder,
        create_video_metadata_from_form,
        get_video_context_integration
    )
    print("‚úÖ Import video_context_integration: OK")
except ImportError as e:
    print(f"‚ùå Erreur import video_context_integration: {e}")
    sys.exit(1)

try:
    from src.core.vlm.prompt_builder import PromptBuilder
    print("‚úÖ Import PromptBuilder: OK")
except ImportError as e:
    print(f"‚ùå Erreur import PromptBuilder: {e}")

async def test_video_context_integration():
    """Test complet de l'int√©gration contexte vid√©o."""
    print("\nüß™ Test d'int√©gration contexte vid√©o")
    print("=" * 50)
    
    # 1. Test cr√©ation m√©tadonn√©es depuis formulaire
    print("\n1Ô∏è‚É£ Test cr√©ation VideoContextMetadata depuis formulaire...")
    
    form_data = {
        'title': 'Surveillance Magasin Centre-Ville',
        'location_type': 'Magasin/Commerce',
        'time_context': 'Heures affluence',
        'expected_activities': ['shopping', 'browsing', 'queuing', 'payment'],
        'suspicious_focus': ['Vol √† l\'√©talage', 'Comportements agressifs'],
        'camera_angle': 'Vue plongeante caisse',
        'detailed_description': 'Zone caisse principale avec forte affluence client. Surveillance renforc√©e pour d√©tection vol et comportements suspects.',
        'analysis_priority': '√âlev√©',
        'frame_sampling': 'Dense'
    }
    
    video_metadata = create_video_metadata_from_form(form_data)
    print(f"‚úÖ VideoContextMetadata cr√©√©: {video_metadata.title}")
    print(f"   - Type: {video_metadata.location_type}")
    print(f"   - Focus: {', '.join(video_metadata.suspicious_focus)}")
    
    # 2. Test construction prompt avec contexte
    print("\n2Ô∏è‚É£ Test construction prompt avec contexte vid√©o...")
    
    try:
        prompt_builder = VideoContextPromptBuilder()
        
        base_prompt = "Analyse cette image de surveillance."
        enhanced_prompt = prompt_builder.build_context_enhanced_prompt(
            base_prompt, 
            video_metadata
        )
        
        print("‚úÖ Prompt enrichi avec contexte vid√©o")
        print(f"   - Longueur prompt de base: {len(base_prompt)} chars")
        print(f"   - Longueur prompt enrichi: {len(enhanced_prompt)} chars")
        print(f"   - Enrichissement: +{len(enhanced_prompt) - len(base_prompt)} chars")
        
        # V√©rifications du contenu
        assert video_metadata.title in enhanced_prompt, "Titre manquant dans prompt"
        assert video_metadata.location_type in enhanced_prompt, "Type lieu manquant"
        assert all(focus in enhanced_prompt for focus in video_metadata.suspicious_focus), "Focus surveillance manquant"
        
        print("‚úÖ Tous les √©l√©ments contexte pr√©sents dans le prompt")
        
    except Exception as e:
        print(f"‚ùå Erreur construction prompt: {e}")
        return False
    
    # 3. Test int√©gration chat contexte
    print("\n3Ô∏è‚É£ Test int√©gration chat contextualis√©...")
    
    try:
        context_integration = get_video_context_integration()
        
        base_context = {
            'video_analysis_mode': True,
            'timestamp': datetime.now()
        }
        
        enhanced_context = context_integration.enhance_chat_context(
            base_context,
            video_metadata
        )
        
        print("‚úÖ Contexte chat enrichi")
        print(f"   - Contexte de base: {len(base_context)} cl√©s")
        print(f"   - Contexte enrichi: {len(enhanced_context)} cl√©s")
        
        # V√©rifications
        assert 'video_context' in enhanced_context, "Section video_context manquante"
        assert 'user_intent_context' in enhanced_context, "Section user_intent_context manquante"
        
        video_ctx = enhanced_context['video_context']
        assert video_ctx['context_enhanced'] == True, "Flag context_enhanced manquant"
        assert 'metadata' in video_ctx, "M√©tadonn√©es manquantes"
        assert 'analysis_objectives' in video_ctx, "Objectifs analyse manquants"
        
        print("‚úÖ Structure contexte chat valid√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur int√©gration chat: {e}")
        return False
    
    # 4. Test g√©n√©ration questions contextuelles
    print("\n4Ô∏è‚É£ Test g√©n√©ration questions contextuelles...")
    
    try:
        questions = prompt_builder.generate_contextual_questions(video_metadata)
        
        print(f"‚úÖ {len(questions)} questions g√©n√©r√©es:")
        for i, question in enumerate(questions, 1):
            print(f"   {i}. {question}")
        
        # V√©rifications
        assert len(questions) > 0, "Aucune question g√©n√©r√©e"
        assert any('Magasin' in q for q in questions), "Questions sp√©cifiques au magasin manquantes"
        assert any('vol' in q.lower() for q in questions), "Questions vol manquantes"
        
        print("‚úÖ Questions contextuelles valid√©es")
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration questions: {e}")
        return False
    
    # 5. Test avec PromptBuilder core
    print("\n5Ô∏è‚É£ Test int√©gration avec PromptBuilder core...")
    
    try:
        core_prompt_builder = PromptBuilder()
        
        context = {
            'location': 'Magasin Centre-Ville',
            'timestamp': datetime.now().isoformat(),
            'previous_detections': []
        }
        
        available_tools = ['sam2_segmentator', 'dino_features', 'pose_estimator']
        
        # Test avec contexte vid√©o
        prompt_with_context = core_prompt_builder.build_surveillance_prompt(
            context,
            available_tools,
            None,
            video_metadata.to_dict()
        )
        
        # Test sans contexte vid√©o
        prompt_without_context = core_prompt_builder.build_surveillance_prompt(
            context,
            available_tools,
            None,
            None
        )
        
        print("‚úÖ Integration PromptBuilder core")
        print(f"   - Prompt sans contexte: {len(prompt_without_context)} chars")
        print(f"   - Prompt avec contexte: {len(prompt_with_context)} chars")
        print(f"   - Enrichissement: +{len(prompt_with_context) - len(prompt_without_context)} chars")
        
        # V√©rifications
        assert len(prompt_with_context) > len(prompt_without_context), "Prompt pas enrichi"
        assert "CONTEXTE VID√âO SP√âCIFIQUE" in prompt_with_context, "Section contexte manquante"
        assert video_metadata.title in prompt_with_context, "Titre vid√©o manquant"
        
        print("‚úÖ Prompt core enrichi avec succ√®s")
        
    except Exception as e:
        print(f"‚ùå Erreur int√©gration PromptBuilder core: {e}")
        return False
    
    print("\nüéâ TOUS LES TESTS PASS√âS AVEC SUCC√àS! üéâ")
    print("=" * 50)
    print("‚úÖ L'int√©gration du contexte vid√©o fonctionne correctement:")
    print("   - Cr√©ation m√©tadonn√©es depuis formulaire ‚úÖ")
    print("   - Construction prompt enrichi ‚úÖ")
    print("   - Int√©gration chat contextualis√© ‚úÖ") 
    print("   - G√©n√©ration questions adapt√©es ‚úÖ")
    print("   - Integration PromptBuilder core ‚úÖ")
    
    return True

def test_example_scenarios():
    """Test de sc√©narios d'usage r√©els."""
    print("\nüéØ Test sc√©narios d'usage r√©els")
    print("=" * 40)
    
    scenarios = [
        {
            'name': 'Surveillance Supermarch√©',
            'data': {
                'title': 'Supermarch√© Rayon √âlectronique',
                'location_type': 'Magasin/Commerce',
                'time_context': 'Heures ouverture',
                'expected_activities': ['browsing', 'product_comparison', 'staff_assistance'],
                'suspicious_focus': ['Vol √† l\'√©talage', 'Manipulation √©tiquettes'],
                'detailed_description': 'Rayon √©lectronique avec produits haute valeur. Focus sur comportements de dissimulation.'
            }
        },
        {
            'name': 'Bureau S√©curis√©',
            'data': {
                'title': 'Bureau Direction - Acc√®s Restreint',
                'location_type': 'Bureau',
                'time_context': 'Heures creuses',
                'expected_activities': ['working', 'meetings'],
                'suspicious_focus': ['Intrusion', 'Acc√®s non autoris√©'],
                'detailed_description': 'Zone √† acc√®s restreint. Toute pr√©sence non autoris√©e est suspecte.'
            }
        }
    ]
    
    for scenario in scenarios:
        print(f"\nüìã Sc√©nario: {scenario['name']}")
        try:
            metadata = create_video_metadata_from_form(scenario['data'])
            
            builder = VideoContextPromptBuilder()
            enhanced_prompt = builder.build_context_enhanced_prompt(
                "Analyse cette surveillance.", metadata
            )
            
            questions = builder.generate_contextual_questions(metadata)
            
            print(f"‚úÖ M√©tadonn√©es: {metadata.location_type} - {metadata.time_context}")
            print(f"‚úÖ Prompt enrichi: +{len(enhanced_prompt) - 30} chars")
            print(f"‚úÖ Questions g√©n√©r√©es: {len(questions)}")
            
        except Exception as e:
            print(f"‚ùå Erreur sc√©nario {scenario['name']}: {e}")

if __name__ == "__main__":
    print("üöÄ Lancement des tests d'int√©gration contexte vid√©o")
    print("=" * 60)
    
    # Test principal
    success = asyncio.run(test_video_context_integration())
    
    if success:
        # Tests sc√©narios
        test_example_scenarios()
        
        print("\nüéä INT√âGRATION CONTEXTE VID√âO FONCTIONNELLE! üéä")
        print("\nüìù Utilisation recommand√©e:")
        print("1. Remplir le formulaire contexte dans dashboard")
        print("2. Le syst√®me enrichira automatiquement les prompts VLM")
        print("3. Le chatbot utilisera le contexte pour r√©pondre")
        print("4. Les analyses seront plus pr√©cises et contextualis√©es")
        
    else:
        print("\nüí• √âCHEC DES TESTS - V√©rifier la configuration")
        sys.exit(1)