"""
Syst√®me de surveillance headless refactoris√©.
"""

import asyncio
import json
import logging
import time
from pathlib import Path
from typing import List, Dict, Any, Optional
from collections import defaultdict, deque

from .video_processor import VideoProcessor
from .frame_analyzer import FrameAnalyzer
from .result_models import SurveillanceResult, AlertLevel, SessionSummary
from ..orchestrator.vlm_orchestrator import OrchestrationConfig, OrchestrationMode

logger = logging.getLogger(__name__)


class HeadlessSurveillanceSystem:
    """Syst√®me de surveillance optimis√© pour environnement headless."""

    def __init__(
        self,
        video_source: str = 0,
        vlm_model: str = "kimi-vl-a3b-thinking",
        orchestration_mode: OrchestrationMode = OrchestrationMode.BALANCED,
        save_results: bool = True,
        save_frames: bool = False,
        frame_skip: int = 1,
        max_frames: Optional[int] = None,
        vlm_analysis_mode: str = "smart",
        output_dir: str = "surveillance_output"
    ):
        """
        Initialise le syst√®me de surveillance headless.
        
        Args:
            video_source: Source vid√©o (fichier ou webcam)
            vlm_model: Mod√®le VLM √† utiliser
            orchestration_mode: Mode d'orchestration
            save_results: Sauvegarde des r√©sultats JSON
            save_frames: Sauvegarde des frames
            frame_skip: Nombre de frames √† ignorer
            max_frames: Limite de frames √† traiter
            vlm_analysis_mode: Mode d'analyse VLM
            output_dir: R√©pertoire de sortie
        """
        # Configuration
        self.video_source = video_source
        self.vlm_model = vlm_model
        self.orchestration_mode = orchestration_mode
        self.save_results = save_results
        self.save_frames = save_frames
        self.vlm_analysis_mode = vlm_analysis_mode
        
        # R√©pertoires
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        if save_frames:
            self.frames_dir = self.output_dir / "frames"
            self.frames_dir.mkdir(exist_ok=True)

        # Composants
        self.video_processor = VideoProcessor(
            source=video_source,
            frame_skip=frame_skip,
            max_frames=max_frames
        )
        
        orchestration_config = OrchestrationConfig(mode=orchestration_mode)
        self.frame_analyzer = FrameAnalyzer(
            vlm_model=vlm_model,
            orchestration_config=orchestration_config
        )
        
        # √âtat de la session
        self.results: List[SurveillanceResult] = []
        self.session_start_time = time.time()
        self.is_running = False
        
        # M√©triques en temps r√©el
        self.alert_counts = defaultdict(int)
        self.recent_results = deque(maxlen=100)  # 100 derniers r√©sultats
        
        logger.info(f"üéØ Syst√®me headless initialis√©")
        logger.info(f"üìπ Source: {video_source}")
        logger.info(f"üß† VLM: {vlm_model}")
        logger.info(f"‚öôÔ∏è Mode: {orchestration_mode}")

    async def run_surveillance(self) -> SessionSummary:
        """
        Lance la surveillance compl√®te.
        
        Returns:
            R√©sum√© de la session de surveillance
        """
        logger.info("üöÄ D√©marrage surveillance headless")
        self.is_running = True
        
        try:
            # Traitement des frames
            async for result in self._process_frames():
                self._update_metrics(result)
                
                if self.save_results:
                    self.results.append(result)
                
                # Sauvegarde frame si demand√©e
                if self.save_frames and result.alert_level != AlertLevel.NORMAL:
                    await self._save_critical_frame(result)
                
                # Log p√©riodique
                if result.frame_id % 30 == 0:
                    self._log_progress(result)
            
            # G√©n√©ration du r√©sum√©
            summary = self._generate_session_summary()
            
            # Sauvegarde finale
            if self.save_results:
                await self._save_session_results(summary)
            
            logger.info("‚úÖ Surveillance termin√©e avec succ√®s")
            return summary
            
        except Exception as e:
            logger.error(f"‚ùå Erreur surveillance: {e}")
            raise
        finally:
            self.is_running = False
            await self._cleanup()

    async def _process_frames(self):
        """G√©n√©rateur de traitement des frames."""
        try:
            for frame_id, frame in self.video_processor.frames_generator():
                timestamp = time.time()
                
                # Analyse de la frame
                result = await self.frame_analyzer.analyze_frame(
                    frame=frame,
                    frame_id=frame_id,
                    timestamp=timestamp,
                    vlm_analysis_mode=self.vlm_analysis_mode
                )
                
                yield result
                
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement frames: {e}")
            raise

    def _update_metrics(self, result: SurveillanceResult) -> None:
        """Met √† jour les m√©triques de la session."""
        # Compteurs d'alertes
        self.alert_counts[result.alert_level.value] += 1
        
        # Historique r√©cent
        self.recent_results.append(result)
        
        # Log des alertes importantes
        if result.alert_level in [AlertLevel.ALERTE, AlertLevel.CRITIQUE]:
            logger.warning(
                f"üö® {result.alert_level.value.upper()} Frame {result.frame_id}: "
                f"{result.persons_detected} personnes d√©tect√©es"
            )

    async def _save_critical_frame(self, result: SurveillanceResult) -> None:
        """Sauvegarde les frames critiques."""
        try:
            # Note: La frame actuelle n'est pas directement disponible ici
            # Dans une impl√©mentation compl√®te, il faudrait la passer en param√®tre
            logger.debug(f"üì∏ Frame critique {result.frame_id} marqu√©e pour sauvegarde")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è √âchec sauvegarde frame {result.frame_id}: {e}")

    def _log_progress(self, result: SurveillanceResult) -> None:
        """Log de progression p√©riodique."""
        elapsed = time.time() - self.session_start_time
        
        # Statistiques r√©centes
        recent_avg_time = sum(r.processing_time for r in self.recent_results) / len(self.recent_results)
        total_persons = sum(r.persons_detected for r in self.recent_results)
        
        logger.info(
            f"üìä Frame {result.frame_id} | "
            f"Temps: {elapsed:.1f}s | "
            f"Traitement moy: {recent_avg_time:.2f}s | "
            f"Personnes (100 derni√®res): {total_persons}"
        )

    def _generate_session_summary(self) -> SessionSummary:
        """G√©n√®re le r√©sum√© de la session."""
        session_duration = time.time() - self.session_start_time
        
        if not self.results:
            return SessionSummary(
                total_frames=0,
                total_detections=0,
                total_persons=0,
                alerts_by_level=dict(self.alert_counts),
                average_processing_time=0.0,
                session_duration=session_duration
            )
        
        # Statistiques globales
        total_frames = len(self.results)
        total_detections = sum(r.detections_count for r in self.results)
        total_persons = sum(r.persons_detected for r in self.results)
        avg_processing_time = sum(r.processing_time for r in self.results) / total_frames
        
        # √âv√©nements cl√©s
        key_events = []
        for result in self.results:
            if result.alert_level in [AlertLevel.ALERTE, AlertLevel.CRITIQUE]:
                key_events.append({
                    "frame_id": result.frame_id,
                    "timestamp": result.timestamp,
                    "alert_level": result.alert_level.value,
                    "persons": result.persons_detected,
                    "actions": result.actions_taken
                })
        
        summary = SessionSummary(
            total_frames=total_frames,
            total_detections=total_detections,
            total_persons=total_persons,
            alerts_by_level=dict(self.alert_counts),
            average_processing_time=avg_processing_time,
            session_duration=session_duration,
            key_events=key_events
        )
        
        # Log du r√©sum√©
        logger.info("üìã R√âSUM√â DE SESSION:")
        logger.info(f"  ‚Ä¢ Frames trait√©es: {total_frames}")
        logger.info(f"  ‚Ä¢ D√©tections totales: {total_detections}")
        logger.info(f"  ‚Ä¢ Personnes totales: {total_persons}")
        logger.info(f"  ‚Ä¢ Temps de traitement moyen: {avg_processing_time:.2f}s")
        logger.info(f"  ‚Ä¢ Dur√©e session: {session_duration:.1f}s")
        logger.info(f"  ‚Ä¢ Alertes par niveau: {dict(self.alert_counts)}")
        
        return summary

    async def _save_session_results(self, summary: SessionSummary) -> None:
        """Sauvegarde les r√©sultats de la session."""
        try:
            timestamp = int(time.time())
            
            # Fichier r√©sum√©
            summary_file = self.output_dir / f"session_summary_{timestamp}.json"
            with open(summary_file, 'w', encoding='utf-8') as f:
                json.dump(summary.to_dict(), f, indent=2, ensure_ascii=False)
            
            # Fichier d√©taill√©
            if self.results:
                details_file = self.output_dir / f"session_details_{timestamp}.json"
                results_data = [result.to_dict() for result in self.results]
                
                with open(details_file, 'w', encoding='utf-8') as f:
                    json.dump({
                        "session_info": summary.to_dict(),
                        "frame_results": results_data,
                        "video_info": self.video_processor.get_video_info(),
                        "analyzer_stats": self.frame_analyzer.get_performance_stats()
                    }, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ R√©sultats sauv√©s: {summary_file}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur sauvegarde r√©sultats: {e}")

    async def _cleanup(self) -> None:
        """Nettoyage des ressources."""
        try:
            self.video_processor.release()
            await self.frame_analyzer.cleanup()
            logger.info("üßπ Nettoyage termin√©")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur nettoyage: {e}")

    def get_real_time_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques en temps r√©el."""
        if not self.recent_results:
            return {}
        
        elapsed = time.time() - self.session_start_time
        recent_avg_time = sum(r.processing_time for r in self.recent_results) / len(self.recent_results)
        
        return {
            "is_running": self.is_running,
            "elapsed_time": elapsed,
            "frames_processed": len(self.results),
            "recent_avg_processing_time": recent_avg_time,
            "alert_counts": dict(self.alert_counts),
            "recent_persons": sum(r.persons_detected for r in list(self.recent_results)[-10:])
        }