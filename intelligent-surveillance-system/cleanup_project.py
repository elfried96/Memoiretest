#!/usr/bin/env python3
"""
üßπ Nettoyage Projet - Suppression Fichiers Inutiles
==================================================

Script pour identifier et supprimer les fichiers inutiles du projet
de surveillance intelligente.
"""

import os
import sys
import shutil
from pathlib import Path
from datetime import datetime
import json

class ProjectCleaner:
    """Nettoyeur de projet intelligent."""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.files_to_remove = []
        self.dirs_to_remove = []
        self.files_to_keep = []
        
        # Fichiers essentiels √† GARDER
        self.essential_files = {
            # Core syst√®me
            "src/core/vlm/dynamic_model.py",
            "src/core/vlm/prompt_builder.py", 
            "src/core/orchestrator/vlm_orchestrator.py",
            "src/core/types.py",
            
            # Dashboard principal
            "dashboard/production_dashboard.py",
            "dashboard/video_context_integration.py",
            "dashboard/vlm_chatbot_symbiosis.py",
            "dashboard/vlm_chatbot_optimizations.py",
            "dashboard/vlm_chatbot_advanced_features.py",
            
            # Configuration
            "pyproject.toml",
            "requirements.txt",
            
            # Documentation
            "README.md",
            "VLM_CHATBOT_USER_GUIDE.md",
            
            # Tests principaux
            "run_real_vlm_tests.py",
            "test_complete_system_videos.py",
            "run_performance_tests.py",
            "test_video_context_integration.py",
            
            # Scripts utilitaires
            "start_vlm_chatbot.sh",
        }
        
        # Patterns de fichiers √† SUPPRIMER
        self.patterns_to_remove = [
            # Fichiers temporaires
            "**/*.pyc",
            "**/*.pyo", 
            "**/*.pyd",
            "**/__pycache__",
            "**/.pytest_cache",
            "**/.coverage",
            "**/htmlcov",
            
            # Fichiers syst√®me
            "**/.DS_Store",
            "**/Thumbs.db",
            "**/*.tmp",
            "**/*.temp",
            "**/*.bak",
            "**/*.swp",
            "**/*.swo",
            
            # Logs et cache
            "**/*.log",
            "**/logs",
            "**/.cache",
            "**/cache",
            
            # IDE
            "**/.vscode",
            "**/.idea",
            "**/*.iml",
            
            # R√©sultats tests (anciens)
            "**/performance_results_*.json",
            "**/real_metrics_*.json",
            "**/evaluation_results_*.json",
            "**/complete_system_video_tests_*.json",
        ]
        
        # Dossiers probablement inutiles
        self.dirs_to_check = [
            "test_videos",
            "logs",
            "cache", 
            "tmp",
            "temp",
            "__pycache__",
            ".pytest_cache",
            "htmlcov",
            ".coverage",
            "build",
            "dist",
            "*.egg-info"
        ]
    
    def scan_project(self):
        """Scan complet du projet pour identifier fichiers inutiles."""
        print("üîç SCAN PROJET POUR NETTOYAGE")
        print("=" * 40)
        
        # Scan par patterns
        for pattern in self.patterns_to_remove:
            matches = list(self.project_root.glob(pattern))
            for match in matches:
                if match.is_file():
                    self.files_to_remove.append(match)
                elif match.is_dir():
                    self.dirs_to_remove.append(match)
        
        # Scan dossiers sp√©cifiques
        for dir_pattern in self.dirs_to_check:
            matches = list(self.project_root.glob(f"**/{dir_pattern}"))
            for match in matches:
                if match.is_dir():
                    self.dirs_to_remove.append(match)
        
        # Identification fichiers dupliqu√©s/obsol√®tes
        self._identify_duplicate_files()
        
        # Fichiers probablement obsol√®tes
        self._identify_obsolete_files()
        
        print(f"üìä R√©sultats scan:")
        print(f"   üóëÔ∏è  Fichiers √† supprimer: {len(self.files_to_remove)}")
        print(f"   üìÅ Dossiers √† supprimer: {len(self.dirs_to_remove)}")
    
    def _identify_duplicate_files(self):
        """Identification fichiers dupliqu√©s."""
        duplicates = [
            # Tests dupliqu√©s
            "test_vlm_extended.py",  # Remplac√© par run_real_vlm_tests.py
            "test_vlm_chatbot.py",   # Remplac√© par vlm_chatbot_symbiosis.py
            "collect_real_metrics.py", # Int√©gr√© dans run_real_vlm_tests.py
            "test_dashboard_gpu.py",    # Fonctionnalit√© dans run_performance_tests.py
            
            # Scripts obsol√®tes
            "evaluate_system.py",
            "real_evaluation_guide.py",
            
            # Fichiers config obsol√®tes
            "evaluation_plan_*.json",
        ]
        
        for duplicate in duplicates:
            matches = list(self.project_root.glob(f"**/{duplicate}"))
            self.files_to_remove.extend(matches)
    
    def _identify_obsolete_files(self):
        """Identification fichiers obsol√®tes."""
        # Parcours tous les fichiers Python
        py_files = list(self.project_root.glob("**/*.py"))
        
        for py_file in py_files:
            relative_path = py_file.relative_to(self.project_root)
            
            # Skip fichiers essentiels
            if str(relative_path) in self.essential_files:
                self.files_to_keep.append(py_file)
                continue
            
            # Fichiers tests anciens
            if "test_" in py_file.name and "unit" not in str(py_file) and py_file not in self.files_to_remove:
                # V√©rifier si fichier test obsol√®te
                if self._is_obsolete_test_file(py_file):
                    self.files_to_remove.append(py_file)
            
            # Fichiers avec noms g√©n√©riques suspects
            if py_file.name in ["temp.py", "test.py", "debug.py", "old.py"]:
                self.files_to_remove.append(py_file)
    
    def _is_obsolete_test_file(self, file_path: Path) -> bool:
        """V√©rifie si un fichier test est obsol√®te."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Indicateurs de fichier obsol√®te
            obsolete_indicators = [
                "# TODO: Remove",
                "# DEPRECATED",
                "# OLD VERSION",
                "# OBSOLETE",
                "def old_",
                "def deprecated_"
            ]
            
            for indicator in obsolete_indicators:
                if indicator in content:
                    return True
            
            # Fichier tr√®s court (probablement vide/test)
            if len(content.strip()) < 100:
                return True
                
        except Exception:
            pass
        
        return False
    
    def preview_cleanup(self):
        """Aper√ßu des fichiers qui seront supprim√©s."""
        print("\nüìã APER√áU NETTOYAGE")
        print("=" * 30)
        
        if self.files_to_remove:
            print(f"\nüóëÔ∏è  FICHIERS √Ä SUPPRIMER ({len(self.files_to_remove)}):")
            for file_path in sorted(set(self.files_to_remove)):
                relative_path = file_path.relative_to(self.project_root)
                size = file_path.stat().st_size if file_path.exists() else 0
                print(f"   - {relative_path} ({size} bytes)")
        
        if self.dirs_to_remove:
            print(f"\nüìÅ DOSSIERS √Ä SUPPRIMER ({len(self.dirs_to_remove)}):")
            for dir_path in sorted(set(self.dirs_to_remove)):
                relative_path = dir_path.relative_to(self.project_root)
                print(f"   - {relative_path}/")
        
        print(f"\n‚úÖ FICHIERS ESSENTIELS GARD√âS ({len(self.files_to_keep)}):")
        for file_path in sorted(self.files_to_keep)[:10]:  # Affiche les 10 premiers
            relative_path = file_path.relative_to(self.project_root)
            print(f"   - {relative_path}")
        if len(self.files_to_keep) > 10:
            print(f"   ... et {len(self.files_to_keep) - 10} autres fichiers essentiels")
    
    def calculate_cleanup_impact(self):
        """Calcule l'impact du nettoyage."""
        total_size_to_remove = 0
        files_count = 0
        dirs_count = 0
        
        for file_path in self.files_to_remove:
            if file_path.exists() and file_path.is_file():
                total_size_to_remove += file_path.stat().st_size
                files_count += 1
        
        for dir_path in self.dirs_to_remove:
            if dir_path.exists() and dir_path.is_dir():
                dirs_count += 1
                for item in dir_path.rglob("*"):
                    if item.is_file():
                        total_size_to_remove += item.stat().st_size
        
        print(f"\nüìä IMPACT NETTOYAGE:")
        print(f"   üóëÔ∏è  Fichiers: {files_count}")
        print(f"   üìÅ Dossiers: {dirs_count}")
        print(f"   üíæ Espace lib√©r√©: {total_size_to_remove / 1024:.1f} KB")
        
        return files_count, dirs_count, total_size_to_remove
    
    def perform_cleanup(self, confirm: bool = False):
        """Ex√©cute le nettoyage."""
        if not confirm:
            print("\n‚ö†Ô∏è  NETTOYAGE EN MODE APER√áU SEULEMENT")
            print("    Utilisez confirm=True pour supprimer r√©ellement")
            return
        
        print(f"\nüßπ EX√âCUTION NETTOYAGE")
        print("=" * 30)
        
        removed_files = 0
        removed_dirs = 0
        errors = []
        
        # Suppression fichiers
        for file_path in self.files_to_remove:
            try:
                if file_path.exists():
                    file_path.unlink()
                    removed_files += 1
                    print(f"   üóëÔ∏è  {file_path.name}")
            except Exception as e:
                errors.append(f"Fichier {file_path}: {e}")
        
        # Suppression dossiers
        for dir_path in self.dirs_to_remove:
            try:
                if dir_path.exists():
                    shutil.rmtree(dir_path)
                    removed_dirs += 1
                    print(f"   üìÅ {dir_path.name}/")
            except Exception as e:
                errors.append(f"Dossier {dir_path}: {e}")
        
        print(f"\n‚úÖ NETTOYAGE TERMIN√â:")
        print(f"   üóëÔ∏è  {removed_files} fichiers supprim√©s")
        print(f"   üìÅ {removed_dirs} dossiers supprim√©s")
        
        if errors:
            print(f"   ‚ö†Ô∏è  {len(errors)} erreurs:")
            for error in errors[:5]:  # Max 5 erreurs
                print(f"      - {error}")
    
    def create_backup(self):
        """Cr√©e une sauvegarde avant nettoyage."""
        backup_name = f"backup_before_cleanup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        backup_path = self.project_root.parent / backup_name
        
        print(f"üíæ Cr√©ation sauvegarde: {backup_path}")
        
        try:
            shutil.copytree(self.project_root, backup_path, 
                          ignore=shutil.ignore_patterns('__pycache__', '*.pyc', '.git'))
            print(f"‚úÖ Sauvegarde cr√©√©e: {backup_path}")
            return str(backup_path)
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde: {e}")
            return None
    
    def generate_cleanup_report(self):
        """G√©n√®re rapport de nettoyage."""
        report = {
            'timestamp': datetime.now().isoformat(),
            'files_to_remove': [str(f.relative_to(self.project_root)) for f in self.files_to_remove],
            'dirs_to_remove': [str(d.relative_to(self.project_root)) for d in self.dirs_to_remove],
            'essential_files_kept': [str(f.relative_to(self.project_root)) for f in self.files_to_keep],
            'cleanup_impact': {
                'files_count': len(self.files_to_remove),
                'dirs_count': len(self.dirs_to_remove)
            }
        }
        
        report_file = self.project_root / "cleanup_report.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ Rapport sauvegard√©: {report_file}")
        return str(report_file)

def main():
    """Nettoyage principal."""
    print("üßπ NETTOYAGE PROJET INTELLIGENT")
    print("=" * 45)
    
    cleaner = ProjectCleaner()
    
    # 1. Scan projet
    cleaner.scan_project()
    
    # 2. Aper√ßu nettoyage
    cleaner.preview_cleanup()
    
    # 3. Calcul impact
    files_count, dirs_count, size_freed = cleaner.calculate_cleanup_impact()
    
    # 4. G√©n√©ration rapport
    report_file = cleaner.generate_cleanup_report()
    
    print(f"\nüéØ RECOMMANDATIONS:")
    print(f"1. Examinez le rapport: cleanup_report.json")
    print(f"2. Cr√©ez une sauvegarde si n√©cessaire")
    print(f"3. Ex√©cutez le nettoyage:")
    print(f"   - Mode aper√ßu: python cleanup_project.py")
    print(f"   - Mode r√©el: python cleanup_project.py --confirm")
    
    # Options ligne de commande
    if len(sys.argv) > 1 and "--confirm" in sys.argv:
        print(f"\n‚ö†Ô∏è  MODE CONFIRMATION D√âTECT√â")
        
        # Cr√©ation sauvegarde
        if "--backup" in sys.argv:
            backup_path = cleaner.create_backup()
            if not backup_path:
                print("‚ùå Sauvegarde √©chou√©e - Nettoyage annul√©")
                return
        
        confirm = input("Confirmer le nettoyage ? (oui/non): ").lower()
        if confirm in ['oui', 'o', 'yes', 'y']:
            cleaner.perform_cleanup(confirm=True)
        else:
            print("‚ùå Nettoyage annul√©")
    else:
        print(f"\nüí° Mode aper√ßu - Aucun fichier supprim√©")

if __name__ == "__main__":
    main()